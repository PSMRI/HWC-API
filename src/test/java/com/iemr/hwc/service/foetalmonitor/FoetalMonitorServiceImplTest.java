package com.iemr.hwc.service.foetalmonitor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isA;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;

import com.iemr.hwc.data.foetalmonitor.FoetalMonitor;
import com.iemr.hwc.data.foetalmonitor.FoetalMonitorDeviceID;
import com.iemr.hwc.repo.benFlowStatus.BeneficiaryFlowStatusRepo;
import com.iemr.hwc.repo.foetalmonitor.FoetalMonitorDeviceIDRepo;
import com.iemr.hwc.repo.foetalmonitor.FoetalMonitorRepo;
import com.iemr.hwc.utils.exception.IEMRException;

@ExtendWith(MockitoExtension.class)
class FoetalMonitorServiceImplTest {
    @Mock
    private BeneficiaryFlowStatusRepo beneficiaryFlowStatusRepo;

    @Mock
    private FoetalMonitorDeviceIDRepo foetalMonitorDeviceIDRepo;

    @Mock
    private FoetalMonitorRepo foetalMonitorRepo;

    @InjectMocks
    private FoetalMonitorServiceImpl foetalMonitorServiceImpl;

    @Test
    void testUpdateFoetalMonitorData() throws IEMRException {
        // Arrange
        FoetalMonitor foetalMonitorDataOutside = new FoetalMonitor();
        foetalMonitorDataOutside.setAccelerationsList(new ArrayList<>());
        foetalMonitorDataOutside.setAccelerationsListDB("Accelerations List DB");
        foetalMonitorDataOutside.setBasalHeartRate(1);
        foetalMonitorDataOutside.setBenFlowID(1L);
        foetalMonitorDataOutside.setBeneficiaryID(1L);
        foetalMonitorDataOutside.setBeneficiaryRegID(1L);
        foetalMonitorDataOutside.setCmMotherId("42");
        foetalMonitorDataOutside.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDataOutside.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setDecelerationsList(new ArrayList<>());
        foetalMonitorDataOutside.setDecelerationsListDB("Decelerations List DB");
        foetalMonitorDataOutside.setDeleted(true);
        foetalMonitorDataOutside.setDeviceId("42");
        foetalMonitorDataOutside.setFoetalMonitorID(1L);
        foetalMonitorDataOutside.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitorDataOutside.setFoetalMonitorPartnerID("42");
        foetalMonitorDataOutside.setFoetalMonitorTestId(1L);
        foetalMonitorDataOutside.setLastModDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setLengthOfTest(3);
        foetalMonitorDataOutside.setLongTermVariation(1);
        foetalMonitorDataOutside.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDataOutside.setMother(new HashMap<>());
        foetalMonitorDataOutside.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setMotherName("Mother Name");
        foetalMonitorDataOutside.setMovementEntries(new ArrayList<>());
        foetalMonitorDataOutside.setMovementEntriesDB("Movement Entries DB");
        foetalMonitorDataOutside.setPartnerFoetalMonitorId(1L);
        foetalMonitorDataOutside.setPartnerId("42");
        foetalMonitorDataOutside.setPartnerName("Partner Name");
        foetalMonitorDataOutside.setProcessed("Processed");
        foetalMonitorDataOutside.setProviderServiceMapID(1);
        foetalMonitorDataOutside.setReportPath("Report Path");
        foetalMonitorDataOutside.setResultState(true);
        foetalMonitorDataOutside.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitorDataOutside.setShortTermVariationMilli(1);
        foetalMonitorDataOutside.setTestDoneAt("Test Done At");
        foetalMonitorDataOutside.setTestId("42");
        foetalMonitorDataOutside.setTestName("Test Name");
        foetalMonitorDataOutside.setTestTime(mock(Timestamp.class));
        foetalMonitorDataOutside.setVanID(1);
        foetalMonitorDataOutside.setVisitCode(1L);
        foetalMonitorDataOutside.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(IEMRException.class, () -> foetalMonitorServiceImpl.updateFoetalMonitorData(foetalMonitorDataOutside));
    }

    @Test
    void testUpdateFoetalMonitorData2() throws IEMRException {
        // Arrange
        FoetalMonitor foetalMonitor = new FoetalMonitor();
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getFoetalMonitorDetails(Mockito.<Long>any())).thenReturn(foetalMonitor);
        FoetalMonitor foetalMonitorDataOutside = mock(FoetalMonitor.class);
        when(foetalMonitorDataOutside.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitorDataOutside.getReportPath()).thenReturn("Report Path");
        when(foetalMonitorDataOutside.getAccelerationsList()).thenReturn(new ArrayList<>());
        when(foetalMonitorDataOutside.getAutoFetalMovement()).thenReturn(new ArrayList<>());
        when(foetalMonitorDataOutside.getMovementEntries()).thenReturn(new ArrayList<>());
        when(foetalMonitorDataOutside.getMother()).thenReturn(new HashMap<>());
        doNothing().when(foetalMonitorDataOutside).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitorDataOutside).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setAutoFetalMovementDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitorDataOutside).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDataOutside).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitorDataOutside).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitorDataOutside).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDataOutside).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setaMRITFilePath(Mockito.<String>any());
        foetalMonitorDataOutside.setAccelerationsList(new ArrayList<>());
        foetalMonitorDataOutside.setAccelerationsListDB("Accelerations List DB");
        foetalMonitorDataOutside.setBasalHeartRate(1);
        foetalMonitorDataOutside.setBenFlowID(1L);
        foetalMonitorDataOutside.setBeneficiaryID(1L);
        foetalMonitorDataOutside.setBeneficiaryRegID(1L);
        foetalMonitorDataOutside.setCmMotherId("42");
        foetalMonitorDataOutside.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDataOutside.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setDecelerationsList(new ArrayList<>());
        foetalMonitorDataOutside.setDecelerationsListDB("Decelerations List DB");
        foetalMonitorDataOutside.setDeleted(true);
        foetalMonitorDataOutside.setDeviceId("42");
        foetalMonitorDataOutside.setFoetalMonitorID(1L);
        foetalMonitorDataOutside.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitorDataOutside.setFoetalMonitorPartnerID("42");
        foetalMonitorDataOutside.setFoetalMonitorTestId(1L);
        foetalMonitorDataOutside.setLastModDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setLengthOfTest(3);
        foetalMonitorDataOutside.setLongTermVariation(1);
        foetalMonitorDataOutside.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDataOutside.setMother(new HashMap<>());
        foetalMonitorDataOutside.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setMotherName("Mother Name");
        foetalMonitorDataOutside.setMovementEntries(new ArrayList<>());
        foetalMonitorDataOutside.setMovementEntriesDB("Movement Entries DB");
        foetalMonitorDataOutside.setPartnerFoetalMonitorId(1L);
        foetalMonitorDataOutside.setPartnerId("42");
        foetalMonitorDataOutside.setPartnerName("Partner Name");
        foetalMonitorDataOutside.setProcessed("Processed");
        foetalMonitorDataOutside.setProviderServiceMapID(1);
        foetalMonitorDataOutside.setReportPath("Report Path");
        foetalMonitorDataOutside.setResultState(true);
        foetalMonitorDataOutside.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitorDataOutside.setShortTermVariationMilli(1);
        foetalMonitorDataOutside.setTestDoneAt("Test Done At");
        foetalMonitorDataOutside.setTestId("42");
        foetalMonitorDataOutside.setTestName("Test Name");
        foetalMonitorDataOutside.setTestTime(mock(Timestamp.class));
        foetalMonitorDataOutside.setVanID(1);
        foetalMonitorDataOutside.setVisitCode(1L);
        foetalMonitorDataOutside.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(IEMRException.class, () -> foetalMonitorServiceImpl.updateFoetalMonitorData(foetalMonitorDataOutside));
        verify(foetalMonitorDataOutside, atLeast(1)).getAccelerationsList();
        verify(foetalMonitorDataOutside).getAutoFetalMovement();
        verify(foetalMonitorDataOutside).getFoetalMonitorID();
        verify(foetalMonitorDataOutside, atLeast(1)).getMother();
        verify(foetalMonitorDataOutside).getMovementEntries();
        verify(foetalMonitorDataOutside).getReportPath();
        verify(foetalMonitorDataOutside).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setAccelerationsListDB(Mockito.<String>any());
        verify(foetalMonitorDataOutside).setAutoFetalMovementDB(eq("[]"));
        verify(foetalMonitorDataOutside).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setBenFlowID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitorDataOutside).setCmMotherId(eq("42"));
        verify(foetalMonitorDataOutside, atLeast(1)).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitorDataOutside).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitorDataOutside).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setDecelerationsListDB(Mockito.<String>any());
        verify(foetalMonitorDataOutside, atLeast(1)).setDeleted(isA(Boolean.class));
        verify(foetalMonitorDataOutside).setDeviceId(eq("42"));
        verify(foetalMonitorDataOutside).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setFoetalMonitorMotherID(Mockito.<String>any());
        verify(foetalMonitorDataOutside, atLeast(1)).setFoetalMonitorPartnerID(Mockito.<String>any());
        verify(foetalMonitorDataOutside, atLeast(1)).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitorDataOutside).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitorDataOutside).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitorDataOutside).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitorDataOutside).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitorDataOutside).setMother(isA(Map.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setMotherLMPDate(Mockito.<Timestamp>any());
        verify(foetalMonitorDataOutside, atLeast(1)).setMotherName(eq("Mother Name"));
        verify(foetalMonitorDataOutside).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setMovementEntriesDB(Mockito.<String>any());
        verify(foetalMonitorDataOutside).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitorDataOutside).setPartnerId(eq("42"));
        verify(foetalMonitorDataOutside, atLeast(1)).setPartnerName(Mockito.<String>any());
        verify(foetalMonitorDataOutside).setProcessed(eq("Processed"));
        verify(foetalMonitorDataOutside, atLeast(1)).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitorDataOutside).setReportPath(eq("Report Path"));
        verify(foetalMonitorDataOutside, atLeast(1)).setResultState(isA(Boolean.class));
        verify(foetalMonitorDataOutside).setShortTermVariationBpm(eq("Short Term Variation Bpm"));
        verify(foetalMonitorDataOutside).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitorDataOutside).setTestDoneAt(eq("Test Done At"));
        verify(foetalMonitorDataOutside).setTestId(eq("42"));
        verify(foetalMonitorDataOutside, atLeast(1)).setTestName(eq("Test Name"));
        verify(foetalMonitorDataOutside, atLeast(1)).setTestTime(Mockito.<Timestamp>any());
        verify(foetalMonitorDataOutside, atLeast(1)).setVanID(isA(Integer.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setVisitCode(isA(Long.class));
        verify(foetalMonitorDataOutside).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorRepo).getFoetalMonitorDetails(isA(Long.class));
    }

    @Test
    void testUpdateFoetalMonitorData3() throws IEMRException {
        // Arrange
        FoetalMonitor foetalMonitor = mock(FoetalMonitor.class);
        when(foetalMonitor.getDeleted()).thenReturn(true);
        when(foetalMonitor.getProviderServiceMapID()).thenReturn(1);
        when(foetalMonitor.getVanID()).thenReturn(1);
        when(foetalMonitor.getBenFlowID()).thenReturn(1L);
        when(foetalMonitor.getBeneficiaryID()).thenReturn(1L);
        when(foetalMonitor.getBeneficiaryRegID()).thenReturn(1L);
        when(foetalMonitor.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitor.getFoetalMonitorTestId()).thenReturn(1L);
        when(foetalMonitor.getVisitCode()).thenReturn(1L);
        when(foetalMonitor.getCreatedBy()).thenReturn("Jan 1, 2020 8:00am GMT+0100");
        when(foetalMonitor.getMotherName()).thenReturn("Mother Name");
        when(foetalMonitor.getTestName()).thenReturn("Test Name");
        when(foetalMonitor.getMotherLMPDate()).thenReturn(mock(Timestamp.class));
        when(foetalMonitor.getTestTime()).thenReturn(mock(Timestamp.class));
        doNothing().when(foetalMonitor).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitor).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitor).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitor).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitor).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setaMRITFilePath(Mockito.<String>any());
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getFoetalMonitorDetails(Mockito.<Long>any())).thenReturn(foetalMonitor);
        FoetalMonitor foetalMonitorDataOutside = mock(FoetalMonitor.class);
        when(foetalMonitorDataOutside.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitorDataOutside.getReportPath()).thenReturn("Report Path");
        when(foetalMonitorDataOutside.getAccelerationsList()).thenReturn(new ArrayList<>());
        when(foetalMonitorDataOutside.getAutoFetalMovement()).thenReturn(new ArrayList<>());
        when(foetalMonitorDataOutside.getMovementEntries()).thenReturn(new ArrayList<>());
        when(foetalMonitorDataOutside.getMother()).thenReturn(new HashMap<>());
        doNothing().when(foetalMonitorDataOutside).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitorDataOutside).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setAutoFetalMovementDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitorDataOutside).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDataOutside).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitorDataOutside).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitorDataOutside).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDataOutside).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitorDataOutside).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDataOutside).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDataOutside).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitorDataOutside).setaMRITFilePath(Mockito.<String>any());
        foetalMonitorDataOutside.setAccelerationsList(new ArrayList<>());
        foetalMonitorDataOutside.setAccelerationsListDB("Accelerations List DB");
        foetalMonitorDataOutside.setBasalHeartRate(1);
        foetalMonitorDataOutside.setBenFlowID(1L);
        foetalMonitorDataOutside.setBeneficiaryID(1L);
        foetalMonitorDataOutside.setBeneficiaryRegID(1L);
        foetalMonitorDataOutside.setCmMotherId("42");
        foetalMonitorDataOutside.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDataOutside.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setDecelerationsList(new ArrayList<>());
        foetalMonitorDataOutside.setDecelerationsListDB("Decelerations List DB");
        foetalMonitorDataOutside.setDeleted(true);
        foetalMonitorDataOutside.setDeviceId("42");
        foetalMonitorDataOutside.setFoetalMonitorID(1L);
        foetalMonitorDataOutside.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitorDataOutside.setFoetalMonitorPartnerID("42");
        foetalMonitorDataOutside.setFoetalMonitorTestId(1L);
        foetalMonitorDataOutside.setLastModDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setLengthOfTest(3);
        foetalMonitorDataOutside.setLongTermVariation(1);
        foetalMonitorDataOutside.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDataOutside.setMother(new HashMap<>());
        foetalMonitorDataOutside.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitorDataOutside.setMotherName("Mother Name");
        foetalMonitorDataOutside.setMovementEntries(new ArrayList<>());
        foetalMonitorDataOutside.setMovementEntriesDB("Movement Entries DB");
        foetalMonitorDataOutside.setPartnerFoetalMonitorId(1L);
        foetalMonitorDataOutside.setPartnerId("42");
        foetalMonitorDataOutside.setPartnerName("Partner Name");
        foetalMonitorDataOutside.setProcessed("Processed");
        foetalMonitorDataOutside.setProviderServiceMapID(1);
        foetalMonitorDataOutside.setReportPath("Report Path");
        foetalMonitorDataOutside.setResultState(true);
        foetalMonitorDataOutside.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitorDataOutside.setShortTermVariationMilli(1);
        foetalMonitorDataOutside.setTestDoneAt("Test Done At");
        foetalMonitorDataOutside.setTestId("42");
        foetalMonitorDataOutside.setTestName("Test Name");
        foetalMonitorDataOutside.setTestTime(mock(Timestamp.class));
        foetalMonitorDataOutside.setVanID(1);
        foetalMonitorDataOutside.setVisitCode(1L);
        foetalMonitorDataOutside.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(IEMRException.class, () -> foetalMonitorServiceImpl.updateFoetalMonitorData(foetalMonitorDataOutside));
        verify(foetalMonitorDataOutside, atLeast(1)).getAccelerationsList();
        verify(foetalMonitorDataOutside).getAutoFetalMovement();
        verify(foetalMonitor).getBenFlowID();
        verify(foetalMonitor).getBeneficiaryID();
        verify(foetalMonitor).getBeneficiaryRegID();
        verify(foetalMonitor).getCreatedBy();
        verify(foetalMonitor).getDeleted();
        verify(foetalMonitor).getFoetalMonitorID();
        verify(foetalMonitorDataOutside).getFoetalMonitorID();
        verify(foetalMonitor).getFoetalMonitorTestId();
        verify(foetalMonitorDataOutside, atLeast(1)).getMother();
        verify(foetalMonitor).getMotherLMPDate();
        verify(foetalMonitor).getMotherName();
        verify(foetalMonitorDataOutside).getMovementEntries();
        verify(foetalMonitor).getProviderServiceMapID();
        verify(foetalMonitorDataOutside).getReportPath();
        verify(foetalMonitor).getTestName();
        verify(foetalMonitor).getTestTime();
        verify(foetalMonitor).getVanID();
        verify(foetalMonitor, atLeast(1)).getVisitCode();
        verify(foetalMonitor).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitorDataOutside).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setAccelerationsListDB(Mockito.<String>any());
        verify(foetalMonitor).setAccelerationsListDB(eq("Accelerations List DB"));
        verify(foetalMonitorDataOutside).setAutoFetalMovementDB(eq("[]"));
        verify(foetalMonitor).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitorDataOutside).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitor).setBenFlowID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setBenFlowID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitor).setCmMotherId(eq("42"));
        verify(foetalMonitorDataOutside).setCmMotherId(eq("42"));
        verify(foetalMonitor).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitorDataOutside, atLeast(1)).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitor).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitorDataOutside).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitor).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitorDataOutside).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setDecelerationsListDB(Mockito.<String>any());
        verify(foetalMonitor).setDecelerationsListDB(eq("Decelerations List DB"));
        verify(foetalMonitor).setDeleted(isA(Boolean.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setDeleted(isA(Boolean.class));
        verify(foetalMonitor).setDeviceId(eq("42"));
        verify(foetalMonitorDataOutside).setDeviceId(eq("42"));
        verify(foetalMonitor).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitorDataOutside).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setFoetalMonitorMotherID(Mockito.<String>any());
        verify(foetalMonitor).setFoetalMonitorMotherID(eq("Foetal Monitor Mother ID"));
        verify(foetalMonitorDataOutside, atLeast(1)).setFoetalMonitorPartnerID(Mockito.<String>any());
        verify(foetalMonitor).setFoetalMonitorPartnerID(eq("42"));
        verify(foetalMonitor).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitor).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitorDataOutside).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitor).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitorDataOutside).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitor).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitorDataOutside).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitor).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitorDataOutside).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitor).setMother(isA(Map.class));
        verify(foetalMonitorDataOutside).setMother(isA(Map.class));
        verify(foetalMonitor).setMotherLMPDate(isA(Timestamp.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setMotherLMPDate(Mockito.<Timestamp>any());
        verify(foetalMonitor).setMotherName(eq("Mother Name"));
        verify(foetalMonitorDataOutside, atLeast(1)).setMotherName(eq("Mother Name"));
        verify(foetalMonitor).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitorDataOutside).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setMovementEntriesDB(Mockito.<String>any());
        verify(foetalMonitor).setMovementEntriesDB(eq("Movement Entries DB"));
        verify(foetalMonitor).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitorDataOutside).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitor).setPartnerId(eq("42"));
        verify(foetalMonitorDataOutside).setPartnerId(eq("42"));
        verify(foetalMonitorDataOutside, atLeast(1)).setPartnerName(Mockito.<String>any());
        verify(foetalMonitor).setPartnerName(eq("Partner Name"));
        verify(foetalMonitor).setProcessed(eq("Processed"));
        verify(foetalMonitorDataOutside).setProcessed(eq("Processed"));
        verify(foetalMonitor).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitor).setReportPath(eq("Report Path"));
        verify(foetalMonitorDataOutside).setReportPath(eq("Report Path"));
        verify(foetalMonitor).setResultState(isA(Boolean.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setResultState(isA(Boolean.class));
        verify(foetalMonitor).setShortTermVariationBpm(eq("Short Term Variation Bpm"));
        verify(foetalMonitorDataOutside).setShortTermVariationBpm(eq("Short Term Variation Bpm"));
        verify(foetalMonitor).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitorDataOutside).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitor).setTestDoneAt(eq("Test Done At"));
        verify(foetalMonitorDataOutside).setTestDoneAt(eq("Test Done At"));
        verify(foetalMonitor).setTestId(eq("42"));
        verify(foetalMonitorDataOutside).setTestId(eq("42"));
        verify(foetalMonitor).setTestName(eq("Test Name"));
        verify(foetalMonitorDataOutside, atLeast(1)).setTestName(eq("Test Name"));
        verify(foetalMonitor).setTestTime(isA(Timestamp.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setTestTime(Mockito.<Timestamp>any());
        verify(foetalMonitor).setVanID(isA(Integer.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setVanID(isA(Integer.class));
        verify(foetalMonitor).setVisitCode(isA(Long.class));
        verify(foetalMonitorDataOutside, atLeast(1)).setVisitCode(isA(Long.class));
        verify(foetalMonitor).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorDataOutside).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorRepo).getFoetalMonitorDetails(isA(Long.class));
    }

    @Test
    void testReadPDFANDGetBase64() throws IEMRException, IOException {
        foetalMonitorServiceImpl.readPDFANDGetBase64("/directory/foo.txt");
    }

    @Test
    void testSendFoetalMonitorTestDetails() throws Exception {
        // Arrange
        FoetalMonitorDeviceID foetalMonitorDeviceID = new FoetalMonitorDeviceID();
        foetalMonitorDeviceID.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDeviceID.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setDeactivated(true);
        foetalMonitorDeviceID.setDeleted(true);
        foetalMonitorDeviceID.setDeviceID("Device ID");
        foetalMonitorDeviceID.setDeviceName("Device Name");
        foetalMonitorDeviceID.setLastModDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDeviceID.setParkingPlaceID(1);
        foetalMonitorDeviceID.setProcessed("Processed");
        foetalMonitorDeviceID.setProviderServiceMapID(1);
        foetalMonitorDeviceID.setVanID(1);
        foetalMonitorDeviceID.setVanName("Van Name");
        foetalMonitorDeviceID.setVanTypeID(1);
        foetalMonitorDeviceID.setVfdID(1L);
        when(foetalMonitorDeviceIDRepo.getDeviceIDForVanID(Mockito.<Integer>any())).thenReturn(foetalMonitorDeviceID);
        Timestamp motherLMPDate = mock(Timestamp.class);
        when(motherLMPDate.getTime()).thenReturn(10L);

        FoetalMonitor foetalMonitor = new FoetalMonitor();
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(motherLMPDate);
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getBenID(Mockito.<Long>any())).thenReturn(1L);
        when(foetalMonitorRepo.save(Mockito.<FoetalMonitor>any())).thenReturn(foetalMonitor);

        FoetalMonitor request = new FoetalMonitor();
        request.setAccelerationsList(new ArrayList<>());
        request.setAccelerationsListDB("Accelerations List DB");
        request.setBasalHeartRate(1);
        request.setBenFlowID(1L);
        request.setBeneficiaryID(1L);
        request.setBeneficiaryRegID(1L);
        request.setCmMotherId("42");
        request.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        request.setCreatedDate(mock(Timestamp.class));
        request.setDecelerationsList(new ArrayList<>());
        request.setDecelerationsListDB("Decelerations List DB");
        request.setDeleted(true);
        request.setDeviceId("42");
        request.setFoetalMonitorID(1L);
        request.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        request.setFoetalMonitorPartnerID("42");
        request.setFoetalMonitorTestId(1L);
        request.setLastModDate(mock(Timestamp.class));
        request.setLengthOfTest(3);
        request.setLongTermVariation(1);
        request.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        request.setMother(new HashMap<>());
        request.setMotherLMPDate(mock(Timestamp.class));
        request.setMotherName("Mother Name");
        request.setMovementEntries(new ArrayList<>());
        request.setMovementEntriesDB("Movement Entries DB");
        request.setPartnerFoetalMonitorId(1L);
        request.setPartnerId("42");
        request.setPartnerName("Partner Name");
        request.setProcessed("Processed");
        request.setProviderServiceMapID(1);
        request.setReportPath("Report Path");
        request.setResultState(true);
        request.setShortTermVariationBpm("Short Term Variation Bpm");
        request.setShortTermVariationMilli(1);
        request.setTestDoneAt("Test Done At");
        request.setTestId("42");
        request.setTestName("Test Name");
        request.setTestTime(mock(Timestamp.class));
        request.setVanID(1);
        request.setVisitCode(1L);
        request.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(Exception.class, () -> foetalMonitorServiceImpl.sendFoetalMonitorTestDetails(request, "Auth"));
        verify(foetalMonitorDeviceIDRepo).getDeviceIDForVanID(isA(Integer.class));
        verify(foetalMonitorRepo).getBenID(isA(Long.class));
        verify(motherLMPDate).getTime();
        verify(foetalMonitorRepo, atLeast(1)).save(Mockito.<FoetalMonitor>any());
    }

    @Test
    void testSendFoetalMonitorTestDetails2() throws Exception {
        // Arrange
        Timestamp motherLMPDate = mock(Timestamp.class);
        when(motherLMPDate.getTime()).thenThrow(new RuntimeException("U://U@[9U]:{UU?U#U"));

        FoetalMonitor foetalMonitor = new FoetalMonitor();
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(motherLMPDate);
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getBenID(Mockito.<Long>any())).thenReturn(1L);
        when(foetalMonitorRepo.save(Mockito.<FoetalMonitor>any())).thenReturn(foetalMonitor);

        FoetalMonitor request = new FoetalMonitor();
        request.setAccelerationsList(new ArrayList<>());
        request.setAccelerationsListDB("Accelerations List DB");
        request.setBasalHeartRate(1);
        request.setBenFlowID(1L);
        request.setBeneficiaryID(1L);
        request.setBeneficiaryRegID(1L);
        request.setCmMotherId("42");
        request.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        request.setCreatedDate(mock(Timestamp.class));
        request.setDecelerationsList(new ArrayList<>());
        request.setDecelerationsListDB("Decelerations List DB");
        request.setDeleted(true);
        request.setDeviceId("42");
        request.setFoetalMonitorID(1L);
        request.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        request.setFoetalMonitorPartnerID("42");
        request.setFoetalMonitorTestId(1L);
        request.setLastModDate(mock(Timestamp.class));
        request.setLengthOfTest(3);
        request.setLongTermVariation(1);
        request.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        request.setMother(new HashMap<>());
        request.setMotherLMPDate(mock(Timestamp.class));
        request.setMotherName("Mother Name");
        request.setMovementEntries(new ArrayList<>());
        request.setMovementEntriesDB("Movement Entries DB");
        request.setPartnerFoetalMonitorId(1L);
        request.setPartnerId("42");
        request.setPartnerName("Partner Name");
        request.setProcessed("Processed");
        request.setProviderServiceMapID(1);
        request.setReportPath("Report Path");
        request.setResultState(true);
        request.setShortTermVariationBpm("Short Term Variation Bpm");
        request.setShortTermVariationMilli(1);
        request.setTestDoneAt("Test Done At");
        request.setTestId("42");
        request.setTestName("Test Name");
        request.setTestTime(mock(Timestamp.class));
        request.setVanID(1);
        request.setVisitCode(1L);
        request.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(Exception.class, () -> foetalMonitorServiceImpl.sendFoetalMonitorTestDetails(request, "Auth"));
        verify(foetalMonitorRepo).getBenID(isA(Long.class));
        verify(motherLMPDate).getTime();
        verify(foetalMonitorRepo, atLeast(1)).save(Mockito.<FoetalMonitor>any());
    }

    @Test
    void testSendFoetalMonitorTestDetails3() throws Exception {
        // Arrange
        FoetalMonitorDeviceID foetalMonitorDeviceID = mock(FoetalMonitorDeviceID.class);
        when(foetalMonitorDeviceID.getDeviceID()).thenReturn("");
        doNothing().when(foetalMonitorDeviceID).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setDeactivated(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceID(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setParkingPlaceID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setVanTypeID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVfdID(Mockito.<Long>any());
        foetalMonitorDeviceID.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDeviceID.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setDeactivated(true);
        foetalMonitorDeviceID.setDeleted(true);
        foetalMonitorDeviceID.setDeviceID("Device ID");
        foetalMonitorDeviceID.setDeviceName("Device Name");
        foetalMonitorDeviceID.setLastModDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDeviceID.setParkingPlaceID(1);
        foetalMonitorDeviceID.setProcessed("Processed");
        foetalMonitorDeviceID.setProviderServiceMapID(1);
        foetalMonitorDeviceID.setVanID(1);
        foetalMonitorDeviceID.setVanName("Van Name");
        foetalMonitorDeviceID.setVanTypeID(1);
        foetalMonitorDeviceID.setVfdID(1L);
        when(foetalMonitorDeviceIDRepo.getDeviceIDForVanID(Mockito.<Integer>any())).thenReturn(foetalMonitorDeviceID);
        Timestamp motherLMPDate = mock(Timestamp.class);
        when(motherLMPDate.getTime()).thenReturn(10L);

        FoetalMonitor foetalMonitor = new FoetalMonitor();
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(motherLMPDate);
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getBenID(Mockito.<Long>any())).thenReturn(1L);
        when(foetalMonitorRepo.save(Mockito.<FoetalMonitor>any())).thenReturn(foetalMonitor);

        FoetalMonitor request = new FoetalMonitor();
        request.setAccelerationsList(new ArrayList<>());
        request.setAccelerationsListDB("Accelerations List DB");
        request.setBasalHeartRate(1);
        request.setBenFlowID(1L);
        request.setBeneficiaryID(1L);
        request.setBeneficiaryRegID(1L);
        request.setCmMotherId("42");
        request.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        request.setCreatedDate(mock(Timestamp.class));
        request.setDecelerationsList(new ArrayList<>());
        request.setDecelerationsListDB("Decelerations List DB");
        request.setDeleted(true);
        request.setDeviceId("42");
        request.setFoetalMonitorID(1L);
        request.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        request.setFoetalMonitorPartnerID("42");
        request.setFoetalMonitorTestId(1L);
        request.setLastModDate(mock(Timestamp.class));
        request.setLengthOfTest(3);
        request.setLongTermVariation(1);
        request.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        request.setMother(new HashMap<>());
        request.setMotherLMPDate(mock(Timestamp.class));
        request.setMotherName("Mother Name");
        request.setMovementEntries(new ArrayList<>());
        request.setMovementEntriesDB("Movement Entries DB");
        request.setPartnerFoetalMonitorId(1L);
        request.setPartnerId("42");
        request.setPartnerName("Partner Name");
        request.setProcessed("Processed");
        request.setProviderServiceMapID(1);
        request.setReportPath("Report Path");
        request.setResultState(true);
        request.setShortTermVariationBpm("Short Term Variation Bpm");
        request.setShortTermVariationMilli(1);
        request.setTestDoneAt("Test Done At");
        request.setTestId("42");
        request.setTestName("Test Name");
        request.setTestTime(mock(Timestamp.class));
        request.setVanID(1);
        request.setVisitCode(1L);
        request.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(Exception.class, () -> foetalMonitorServiceImpl.sendFoetalMonitorTestDetails(request, "Auth"));
        verify(foetalMonitorDeviceID, atLeast(1)).getDeviceID();
        verify(foetalMonitorDeviceID).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setDeactivated(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeleted(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeviceID(eq("Device ID"));
        verify(foetalMonitorDeviceID).setDeviceName(eq("Device Name"));
        verify(foetalMonitorDeviceID).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setParkingPlaceID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setProcessed(eq("Processed"));
        verify(foetalMonitorDeviceID).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanName(eq("Van Name"));
        verify(foetalMonitorDeviceID).setVanTypeID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVfdID(isA(Long.class));
        verify(foetalMonitorDeviceIDRepo).getDeviceIDForVanID(isA(Integer.class));
        verify(foetalMonitorRepo).getBenID(isA(Long.class));
        verify(motherLMPDate).getTime();
        verify(foetalMonitorRepo, atLeast(1)).save(Mockito.<FoetalMonitor>any());
    }

    @Test
    void testSendFoetalMonitorTestDetails4() throws Exception {
        // Arrange
        FoetalMonitorDeviceID foetalMonitorDeviceID = mock(FoetalMonitorDeviceID.class);
        when(foetalMonitorDeviceID.getDeviceID()).thenReturn("Device ID");
        doNothing().when(foetalMonitorDeviceID).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setDeactivated(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceID(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setParkingPlaceID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setVanTypeID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVfdID(Mockito.<Long>any());
        foetalMonitorDeviceID.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDeviceID.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setDeactivated(true);
        foetalMonitorDeviceID.setDeleted(true);
        foetalMonitorDeviceID.setDeviceID("Device ID");
        foetalMonitorDeviceID.setDeviceName("Device Name");
        foetalMonitorDeviceID.setLastModDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDeviceID.setParkingPlaceID(1);
        foetalMonitorDeviceID.setProcessed("Processed");
        foetalMonitorDeviceID.setProviderServiceMapID(1);
        foetalMonitorDeviceID.setVanID(1);
        foetalMonitorDeviceID.setVanName("Van Name");
        foetalMonitorDeviceID.setVanTypeID(1);
        foetalMonitorDeviceID.setVfdID(1L);
        when(foetalMonitorDeviceIDRepo.getDeviceIDForVanID(Mockito.<Integer>any())).thenReturn(foetalMonitorDeviceID);
        Timestamp motherLMPDate = mock(Timestamp.class);
        when(motherLMPDate.getTime()).thenReturn(10L);
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(10L);
        FoetalMonitor foetalMonitor = mock(FoetalMonitor.class);
        when(foetalMonitor.getVanID()).thenReturn(1);
        when(foetalMonitor.getMotherName()).thenReturn("Mother Name");
        when(foetalMonitor.getTestName()).thenReturn("Test Name");
        when(foetalMonitor.getMotherLMPDate()).thenReturn(timestamp);
        when(foetalMonitor.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitor.getPartnerFoetalMonitorId()).thenReturn(1L);
        doNothing().when(foetalMonitor).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitor).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitor).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitor).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitor).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setaMRITFilePath(Mockito.<String>any());
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(motherLMPDate);
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getBenID(Mockito.<Long>any())).thenReturn(1L);
        when(foetalMonitorRepo.save(Mockito.<FoetalMonitor>any())).thenReturn(foetalMonitor);

        FoetalMonitor request = new FoetalMonitor();
        request.setAccelerationsList(new ArrayList<>());
        request.setAccelerationsListDB("Accelerations List DB");
        request.setBasalHeartRate(1);
        request.setBenFlowID(1L);
        request.setBeneficiaryID(1L);
        request.setBeneficiaryRegID(1L);
        request.setCmMotherId("42");
        request.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        request.setCreatedDate(mock(Timestamp.class));
        request.setDecelerationsList(new ArrayList<>());
        request.setDecelerationsListDB("Decelerations List DB");
        request.setDeleted(true);
        request.setDeviceId("42");
        request.setFoetalMonitorID(1L);
        request.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        request.setFoetalMonitorPartnerID("42");
        request.setFoetalMonitorTestId(1L);
        request.setLastModDate(mock(Timestamp.class));
        request.setLengthOfTest(3);
        request.setLongTermVariation(1);
        request.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        request.setMother(new HashMap<>());
        request.setMotherLMPDate(mock(Timestamp.class));
        request.setMotherName("Mother Name");
        request.setMovementEntries(new ArrayList<>());
        request.setMovementEntriesDB("Movement Entries DB");
        request.setPartnerFoetalMonitorId(1L);
        request.setPartnerId("42");
        request.setPartnerName("Partner Name");
        request.setProcessed("Processed");
        request.setProviderServiceMapID(1);
        request.setReportPath("Report Path");
        request.setResultState(true);
        request.setShortTermVariationBpm("Short Term Variation Bpm");
        request.setShortTermVariationMilli(1);
        request.setTestDoneAt("Test Done At");
        request.setTestId("42");
        request.setTestName("Test Name");
        request.setTestTime(mock(Timestamp.class));
        request.setVanID(1);
        request.setVisitCode(1L);
        request.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(Exception.class, () -> foetalMonitorServiceImpl.sendFoetalMonitorTestDetails(request, "Auth"));
        verify(foetalMonitor, atLeast(1)).getFoetalMonitorID();
        verify(foetalMonitor).getMotherLMPDate();
        verify(foetalMonitor).getMotherName();
        verify(foetalMonitor, atLeast(1)).getPartnerFoetalMonitorId();
        verify(foetalMonitor).getTestName();
        verify(foetalMonitor).getVanID();
        verify(foetalMonitor).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setAccelerationsListDB(eq("Accelerations List DB"));
        verify(foetalMonitor).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitor).setBenFlowID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitor).setCmMotherId(eq("42"));
        verify(foetalMonitor).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitor).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitor).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setDecelerationsListDB(eq("Decelerations List DB"));
        verify(foetalMonitor, atLeast(1)).setDeleted(isA(Boolean.class));
        verify(foetalMonitor).setDeviceId(eq("42"));
        verify(foetalMonitor).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitor).setFoetalMonitorMotherID(eq("Foetal Monitor Mother ID"));
        verify(foetalMonitor).setFoetalMonitorPartnerID(eq("42"));
        verify(foetalMonitor).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitor).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitor).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitor).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitor).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitor).setMother(isA(Map.class));
        verify(foetalMonitor).setMotherLMPDate(isA(Timestamp.class));
        verify(foetalMonitor).setMotherName(eq("Mother Name"));
        verify(foetalMonitor).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitor).setMovementEntriesDB(eq("Movement Entries DB"));
        verify(foetalMonitor).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitor).setPartnerId(eq("42"));
        verify(foetalMonitor).setPartnerName(eq("Partner Name"));
        verify(foetalMonitor).setProcessed(eq("Processed"));
        verify(foetalMonitor).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitor).setReportPath(eq("Report Path"));
        verify(foetalMonitor).setResultState(isA(Boolean.class));
        verify(foetalMonitor).setShortTermVariationBpm(eq("Short Term Variation Bpm"));
        verify(foetalMonitor).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitor).setTestDoneAt(eq("Test Done At"));
        verify(foetalMonitor).setTestId(eq("42"));
        verify(foetalMonitor).setTestName(eq("Test Name"));
        verify(foetalMonitor).setTestTime(isA(Timestamp.class));
        verify(foetalMonitor).setVanID(isA(Integer.class));
        verify(foetalMonitor).setVisitCode(isA(Long.class));
        verify(foetalMonitor).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorDeviceID, atLeast(1)).getDeviceID();
        verify(foetalMonitorDeviceID).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setDeactivated(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeleted(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeviceID(eq("Device ID"));
        verify(foetalMonitorDeviceID).setDeviceName(eq("Device Name"));
        verify(foetalMonitorDeviceID).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setParkingPlaceID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setProcessed(eq("Processed"));
        verify(foetalMonitorDeviceID).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanName(eq("Van Name"));
        verify(foetalMonitorDeviceID).setVanTypeID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVfdID(isA(Long.class));
        verify(foetalMonitorDeviceIDRepo).getDeviceIDForVanID(isA(Integer.class));
        verify(foetalMonitorRepo).getBenID(isA(Long.class));
        verify(timestamp).getTime();
        verify(foetalMonitorRepo, atLeast(1)).save(Mockito.<FoetalMonitor>any());
    }

    @Test
    void testSendFoetalMonitorTestDetails5() throws Exception {
        // Arrange
        FoetalMonitorDeviceID foetalMonitorDeviceID = mock(FoetalMonitorDeviceID.class);
        when(foetalMonitorDeviceID.getDeviceID()).thenReturn("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        doNothing().when(foetalMonitorDeviceID).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setDeactivated(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceID(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setParkingPlaceID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setVanTypeID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVfdID(Mockito.<Long>any());
        foetalMonitorDeviceID.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDeviceID.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setDeactivated(true);
        foetalMonitorDeviceID.setDeleted(true);
        foetalMonitorDeviceID.setDeviceID("Device ID");
        foetalMonitorDeviceID.setDeviceName("Device Name");
        foetalMonitorDeviceID.setLastModDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDeviceID.setParkingPlaceID(1);
        foetalMonitorDeviceID.setProcessed("Processed");
        foetalMonitorDeviceID.setProviderServiceMapID(1);
        foetalMonitorDeviceID.setVanID(1);
        foetalMonitorDeviceID.setVanName("Van Name");
        foetalMonitorDeviceID.setVanTypeID(1);
        foetalMonitorDeviceID.setVfdID(1L);
        when(foetalMonitorDeviceIDRepo.getDeviceIDForVanID(Mockito.<Integer>any())).thenReturn(foetalMonitorDeviceID);
        Timestamp motherLMPDate = mock(Timestamp.class);
        when(motherLMPDate.getTime()).thenReturn(10L);
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(10L);
        FoetalMonitor foetalMonitor = mock(FoetalMonitor.class);
        when(foetalMonitor.getVanID()).thenReturn(1);
        when(foetalMonitor.getMotherName()).thenReturn("Mother Name");
        when(foetalMonitor.getTestName()).thenReturn("Test Name");
        when(foetalMonitor.getMotherLMPDate()).thenReturn(timestamp);
        when(foetalMonitor.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitor.getPartnerFoetalMonitorId()).thenReturn(1L);
        doNothing().when(foetalMonitor).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitor).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitor).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitor).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitor).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setaMRITFilePath(Mockito.<String>any());
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(motherLMPDate);
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getBenID(Mockito.<Long>any())).thenReturn(1L);
        when(foetalMonitorRepo.save(Mockito.<FoetalMonitor>any())).thenReturn(foetalMonitor);

        FoetalMonitor request = new FoetalMonitor();
        request.setAccelerationsList(new ArrayList<>());
        request.setAccelerationsListDB("Accelerations List DB");
        request.setBasalHeartRate(1);
        request.setBenFlowID(1L);
        request.setBeneficiaryID(1L);
        request.setBeneficiaryRegID(1L);
        request.setCmMotherId("42");
        request.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        request.setCreatedDate(mock(Timestamp.class));
        request.setDecelerationsList(new ArrayList<>());
        request.setDecelerationsListDB("Decelerations List DB");
        request.setDeleted(true);
        request.setDeviceId("42");
        request.setFoetalMonitorID(1L);
        request.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        request.setFoetalMonitorPartnerID("42");
        request.setFoetalMonitorTestId(1L);
        request.setLastModDate(mock(Timestamp.class));
        request.setLengthOfTest(3);
        request.setLongTermVariation(1);
        request.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        request.setMother(new HashMap<>());
        request.setMotherLMPDate(mock(Timestamp.class));
        request.setMotherName("Mother Name");
        request.setMovementEntries(new ArrayList<>());
        request.setMovementEntriesDB("Movement Entries DB");
        request.setPartnerFoetalMonitorId(1L);
        request.setPartnerId("42");
        request.setPartnerName("Partner Name");
        request.setProcessed("Processed");
        request.setProviderServiceMapID(1);
        request.setReportPath("Report Path");
        request.setResultState(true);
        request.setShortTermVariationBpm("Short Term Variation Bpm");
        request.setShortTermVariationMilli(1);
        request.setTestDoneAt("Test Done At");
        request.setTestId("42");
        request.setTestName("Test Name");
        request.setTestTime(mock(Timestamp.class));
        request.setVanID(1);
        request.setVisitCode(1L);
        request.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(Exception.class, () -> foetalMonitorServiceImpl.sendFoetalMonitorTestDetails(request, "Auth"));
        verify(foetalMonitor, atLeast(1)).getFoetalMonitorID();
        verify(foetalMonitor).getMotherLMPDate();
        verify(foetalMonitor).getMotherName();
        verify(foetalMonitor, atLeast(1)).getPartnerFoetalMonitorId();
        verify(foetalMonitor).getTestName();
        verify(foetalMonitor).getVanID();
        verify(foetalMonitor).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setAccelerationsListDB(eq("Accelerations List DB"));
        verify(foetalMonitor).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitor).setBenFlowID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitor).setCmMotherId(eq("42"));
        verify(foetalMonitor).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitor).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitor).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setDecelerationsListDB(eq("Decelerations List DB"));
        verify(foetalMonitor, atLeast(1)).setDeleted(isA(Boolean.class));
        verify(foetalMonitor).setDeviceId(eq("42"));
        verify(foetalMonitor).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitor).setFoetalMonitorMotherID(eq("Foetal Monitor Mother ID"));
        verify(foetalMonitor).setFoetalMonitorPartnerID(eq("42"));
        verify(foetalMonitor).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitor).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitor).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitor).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitor).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitor).setMother(isA(Map.class));
        verify(foetalMonitor).setMotherLMPDate(isA(Timestamp.class));
        verify(foetalMonitor).setMotherName(eq("Mother Name"));
        verify(foetalMonitor).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitor).setMovementEntriesDB(eq("Movement Entries DB"));
        verify(foetalMonitor).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitor).setPartnerId(eq("42"));
        verify(foetalMonitor).setPartnerName(eq("Partner Name"));
        verify(foetalMonitor).setProcessed(eq("Processed"));
        verify(foetalMonitor).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitor).setReportPath(eq("Report Path"));
        verify(foetalMonitor).setResultState(isA(Boolean.class));
        verify(foetalMonitor).setShortTermVariationBpm(eq("Short Term Variation Bpm"));
        verify(foetalMonitor).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitor).setTestDoneAt(eq("Test Done At"));
        verify(foetalMonitor).setTestId(eq("42"));
        verify(foetalMonitor).setTestName(eq("Test Name"));
        verify(foetalMonitor).setTestTime(isA(Timestamp.class));
        verify(foetalMonitor).setVanID(isA(Integer.class));
        verify(foetalMonitor).setVisitCode(isA(Long.class));
        verify(foetalMonitor).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorDeviceID, atLeast(1)).getDeviceID();
        verify(foetalMonitorDeviceID).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setDeactivated(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeleted(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeviceID(eq("Device ID"));
        verify(foetalMonitorDeviceID).setDeviceName(eq("Device Name"));
        verify(foetalMonitorDeviceID).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setParkingPlaceID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setProcessed(eq("Processed"));
        verify(foetalMonitorDeviceID).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanName(eq("Van Name"));
        verify(foetalMonitorDeviceID).setVanTypeID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVfdID(isA(Long.class));
        verify(foetalMonitorDeviceIDRepo).getDeviceIDForVanID(isA(Integer.class));
        verify(foetalMonitorRepo).getBenID(isA(Long.class));
        verify(timestamp).getTime();
        verify(foetalMonitorRepo, atLeast(1)).save(Mockito.<FoetalMonitor>any());
    }

    @Test
    void testSendFoetalMonitorTestDetails6() throws Exception {
        // Arrange
        FoetalMonitorDeviceID foetalMonitorDeviceID = mock(FoetalMonitorDeviceID.class);
        when(foetalMonitorDeviceID.getDeviceID()).thenReturn(null);
        doNothing().when(foetalMonitorDeviceID).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setDeactivated(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceID(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setDeviceName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitorDeviceID).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setParkingPlaceID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVanName(Mockito.<String>any());
        doNothing().when(foetalMonitorDeviceID).setVanTypeID(Mockito.<Integer>any());
        doNothing().when(foetalMonitorDeviceID).setVfdID(Mockito.<Long>any());
        foetalMonitorDeviceID.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitorDeviceID.setCreatedDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setDeactivated(true);
        foetalMonitorDeviceID.setDeleted(true);
        foetalMonitorDeviceID.setDeviceID("Device ID");
        foetalMonitorDeviceID.setDeviceName("Device Name");
        foetalMonitorDeviceID.setLastModDate(mock(Timestamp.class));
        foetalMonitorDeviceID.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitorDeviceID.setParkingPlaceID(1);
        foetalMonitorDeviceID.setProcessed("Processed");
        foetalMonitorDeviceID.setProviderServiceMapID(1);
        foetalMonitorDeviceID.setVanID(1);
        foetalMonitorDeviceID.setVanName("Van Name");
        foetalMonitorDeviceID.setVanTypeID(1);
        foetalMonitorDeviceID.setVfdID(1L);
        when(foetalMonitorDeviceIDRepo.getDeviceIDForVanID(Mockito.<Integer>any())).thenReturn(foetalMonitorDeviceID);
        Timestamp motherLMPDate = mock(Timestamp.class);
        when(motherLMPDate.getTime()).thenReturn(10L);
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(10L);
        FoetalMonitor foetalMonitor = mock(FoetalMonitor.class);
        when(foetalMonitor.getVanID()).thenReturn(1);
        when(foetalMonitor.getMotherName()).thenReturn("Mother Name");
        when(foetalMonitor.getTestName()).thenReturn("Test Name");
        when(foetalMonitor.getMotherLMPDate()).thenReturn(timestamp);
        when(foetalMonitor.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitor.getPartnerFoetalMonitorId()).thenReturn(1L);
        doNothing().when(foetalMonitor).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitor).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitor).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitor).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitor).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setaMRITFilePath(Mockito.<String>any());
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(motherLMPDate);
        foetalMonitor.setMotherName("Mother Name");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("Partner Name");
        foetalMonitor.setProcessed("Processed");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("Report Path");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("Test Done At");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("Test Name");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");
        when(foetalMonitorRepo.getBenID(Mockito.<Long>any())).thenReturn(1L);
        when(foetalMonitorRepo.save(Mockito.<FoetalMonitor>any())).thenReturn(foetalMonitor);

        FoetalMonitor request = new FoetalMonitor();
        request.setAccelerationsList(new ArrayList<>());
        request.setAccelerationsListDB("Accelerations List DB");
        request.setBasalHeartRate(1);
        request.setBenFlowID(1L);
        request.setBeneficiaryID(1L);
        request.setBeneficiaryRegID(1L);
        request.setCmMotherId("42");
        request.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        request.setCreatedDate(mock(Timestamp.class));
        request.setDecelerationsList(new ArrayList<>());
        request.setDecelerationsListDB("Decelerations List DB");
        request.setDeleted(true);
        request.setDeviceId("42");
        request.setFoetalMonitorID(1L);
        request.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        request.setFoetalMonitorPartnerID("42");
        request.setFoetalMonitorTestId(1L);
        request.setLastModDate(mock(Timestamp.class));
        request.setLengthOfTest(3);
        request.setLongTermVariation(1);
        request.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        request.setMother(new HashMap<>());
        request.setMotherLMPDate(mock(Timestamp.class));
        request.setMotherName("Mother Name");
        request.setMovementEntries(new ArrayList<>());
        request.setMovementEntriesDB("Movement Entries DB");
        request.setPartnerFoetalMonitorId(1L);
        request.setPartnerId("42");
        request.setPartnerName("Partner Name");
        request.setProcessed("Processed");
        request.setProviderServiceMapID(1);
        request.setReportPath("Report Path");
        request.setResultState(true);
        request.setShortTermVariationBpm("Short Term Variation Bpm");
        request.setShortTermVariationMilli(1);
        request.setTestDoneAt("Test Done At");
        request.setTestId("42");
        request.setTestName("Test Name");
        request.setTestTime(mock(Timestamp.class));
        request.setVanID(1);
        request.setVisitCode(1L);
        request.setaMRITFilePath("/directory/foo.txt");

        // Act and Assert
        assertThrows(Exception.class, () -> foetalMonitorServiceImpl.sendFoetalMonitorTestDetails(request, "Auth"));
        verify(foetalMonitor, atLeast(1)).getFoetalMonitorID();
        verify(foetalMonitor).getMotherLMPDate();
        verify(foetalMonitor).getMotherName();
        verify(foetalMonitor, atLeast(1)).getPartnerFoetalMonitorId();
        verify(foetalMonitor).getTestName();
        verify(foetalMonitor).getVanID();
        verify(foetalMonitor).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setAccelerationsListDB(eq("Accelerations List DB"));
        verify(foetalMonitor).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitor).setBenFlowID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitor).setCmMotherId(eq("42"));
        verify(foetalMonitor).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitor).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitor).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setDecelerationsListDB(eq("Decelerations List DB"));
        verify(foetalMonitor, atLeast(1)).setDeleted(isA(Boolean.class));
        verify(foetalMonitor).setDeviceId(eq("42"));
        verify(foetalMonitor).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitor).setFoetalMonitorMotherID(eq("Foetal Monitor Mother ID"));
        verify(foetalMonitor).setFoetalMonitorPartnerID(eq("42"));
        verify(foetalMonitor).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitor).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitor).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitor).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitor).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitor).setMother(isA(Map.class));
        verify(foetalMonitor).setMotherLMPDate(isA(Timestamp.class));
        verify(foetalMonitor).setMotherName(eq("Mother Name"));
        verify(foetalMonitor).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitor).setMovementEntriesDB(eq("Movement Entries DB"));
        verify(foetalMonitor).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitor).setPartnerId(eq("42"));
        verify(foetalMonitor).setPartnerName(eq("Partner Name"));
        verify(foetalMonitor).setProcessed(eq("Processed"));
        verify(foetalMonitor).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitor).setReportPath(eq("Report Path"));
        verify(foetalMonitor).setResultState(isA(Boolean.class));
        verify(foetalMonitor).setShortTermVariationBpm(eq("Short Term Variation Bpm"));
        verify(foetalMonitor).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitor).setTestDoneAt(eq("Test Done At"));
        verify(foetalMonitor).setTestId(eq("42"));
        verify(foetalMonitor).setTestName(eq("Test Name"));
        verify(foetalMonitor).setTestTime(isA(Timestamp.class));
        verify(foetalMonitor).setVanID(isA(Integer.class));
        verify(foetalMonitor).setVisitCode(isA(Long.class));
        verify(foetalMonitor).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorDeviceID).getDeviceID();
        verify(foetalMonitorDeviceID).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setDeactivated(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeleted(isA(Boolean.class));
        verify(foetalMonitorDeviceID).setDeviceID(eq("Device ID"));
        verify(foetalMonitorDeviceID).setDeviceName(eq("Device Name"));
        verify(foetalMonitorDeviceID).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitorDeviceID).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitorDeviceID).setParkingPlaceID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setProcessed(eq("Processed"));
        verify(foetalMonitorDeviceID).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVanName(eq("Van Name"));
        verify(foetalMonitorDeviceID).setVanTypeID(isA(Integer.class));
        verify(foetalMonitorDeviceID).setVfdID(isA(Long.class));
        verify(foetalMonitorDeviceIDRepo).getDeviceIDForVanID(isA(Integer.class));
        verify(foetalMonitorRepo).getBenID(isA(Long.class));
        verify(timestamp).getTime();
        verify(foetalMonitorRepo, atLeast(1)).save(Mockito.<FoetalMonitor>any());
    }

    @Test
    void testGetFoetalMonitorDetails() throws IEMRException {
        // Arrange
        when(foetalMonitorRepo.getFoetalMonitorDetailsByFlowId(Mockito.<Long>any())).thenReturn(new ArrayList<>());

        // Act
        String actualFoetalMonitorDetails = foetalMonitorServiceImpl.getFoetalMonitorDetails(1L);

        // Assert
        verify(foetalMonitorRepo).getFoetalMonitorDetailsByFlowId(isA(Long.class));
        assertEquals("{\"benFetosenseData\":[]}", actualFoetalMonitorDetails);
    }

    @Test
    void testGetFoetalMonitorDetails2() throws IEMRException {
        // Arrange
        FoetalMonitor foetalMonitor = new FoetalMonitor();
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("benFetosenseData");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("benFetosenseData");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("benFetosenseData");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitor.setMotherName("benFetosenseData");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("benFetosenseData");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("benFetosenseData");
        foetalMonitor.setProcessed("benFetosenseData");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("benFetosenseData");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("benFetosenseData");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("benFetosenseData");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("benFetosenseData");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");

        ArrayList<FoetalMonitor> foetalMonitorList = new ArrayList<>();
        foetalMonitorList.add(foetalMonitor);
        when(foetalMonitorRepo.getFoetalMonitorDetailsByFlowId(Mockito.<Long>any())).thenReturn(foetalMonitorList);

        // Act
        String actualFoetalMonitorDetails = foetalMonitorServiceImpl.getFoetalMonitorDetails(1L);

        // Assert
        verify(foetalMonitorRepo).getFoetalMonitorDetailsByFlowId(isA(Long.class));
        assertEquals(
                "{\"benFetosenseData\":[{\"partnerFoetalMonitorId\":1,\"beneficiaryRegID\":1,\"benFlowID\":1,\"visitCode\":1,"
                        + "\"foetalMonitorTestId\":1,\"resultState\":true}]}",
                actualFoetalMonitorDetails);
    }

    @Test
    void testGetFoetalMonitorDetails3() throws IEMRException {
        // Arrange
        FoetalMonitor foetalMonitor = new FoetalMonitor();
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("benFetosenseData");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("benFetosenseData");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("benFetosenseData");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitor.setMotherName("benFetosenseData");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("benFetosenseData");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("benFetosenseData");
        foetalMonitor.setProcessed("benFetosenseData");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("benFetosenseData");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("benFetosenseData");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("benFetosenseData");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("benFetosenseData");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");

        FoetalMonitor foetalMonitor2 = new FoetalMonitor();
        foetalMonitor2.setAccelerationsList(new ArrayList<>());
        foetalMonitor2.setAccelerationsListDB("Accelerations List DB");
        foetalMonitor2.setBasalHeartRate(0);
        foetalMonitor2.setBenFlowID(2L);
        foetalMonitor2.setBeneficiaryID(2L);
        foetalMonitor2.setBeneficiaryRegID(2L);
        foetalMonitor2.setCmMotherId("benFetosenseData");
        foetalMonitor2.setCreatedBy("benFetosenseData");
        foetalMonitor2.setCreatedDate(mock(Timestamp.class));
        foetalMonitor2.setDecelerationsList(new ArrayList<>());
        foetalMonitor2.setDecelerationsListDB("Decelerations List DB");
        foetalMonitor2.setDeleted(false);
        foetalMonitor2.setDeviceId("benFetosenseData");
        foetalMonitor2.setFoetalMonitorID(2L);
        foetalMonitor2.setFoetalMonitorMotherID("Foetal Monitor Mother ID");
        foetalMonitor2.setFoetalMonitorPartnerID("benFetosenseData");
        foetalMonitor2.setFoetalMonitorTestId(2L);
        foetalMonitor2.setLastModDate(mock(Timestamp.class));
        foetalMonitor2.setLengthOfTest(1);
        foetalMonitor2.setLongTermVariation(0);
        foetalMonitor2.setModifiedBy("benFetosenseData");
        foetalMonitor2.setMother(new HashMap<>());
        foetalMonitor2.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitor2.setMotherName("Mother Name");
        foetalMonitor2.setMovementEntries(new ArrayList<>());
        foetalMonitor2.setMovementEntriesDB("Movement Entries DB");
        foetalMonitor2.setPartnerFoetalMonitorId(2L);
        foetalMonitor2.setPartnerId("benFetosenseData");
        foetalMonitor2.setPartnerName("Partner Name");
        foetalMonitor2.setProcessed("Processed");
        foetalMonitor2.setProviderServiceMapID(2);
        foetalMonitor2.setReportPath("Report Path");
        foetalMonitor2.setResultState(false);
        foetalMonitor2.setShortTermVariationBpm("Short Term Variation Bpm");
        foetalMonitor2.setShortTermVariationMilli(0);
        foetalMonitor2.setTestDoneAt("Test Done At");
        foetalMonitor2.setTestId("benFetosenseData");
        foetalMonitor2.setTestName("Test Name");
        foetalMonitor2.setTestTime(mock(Timestamp.class));
        foetalMonitor2.setVanID(2);
        foetalMonitor2.setVisitCode(0L);
        foetalMonitor2.setaMRITFilePath("benFetosenseData");

        ArrayList<FoetalMonitor> foetalMonitorList = new ArrayList<>();
        foetalMonitorList.add(foetalMonitor2);
        foetalMonitorList.add(foetalMonitor);
        when(foetalMonitorRepo.getFoetalMonitorDetailsByFlowId(Mockito.<Long>any())).thenReturn(foetalMonitorList);

        // Act
        String actualFoetalMonitorDetails = foetalMonitorServiceImpl.getFoetalMonitorDetails(1L);

        // Assert
        verify(foetalMonitorRepo).getFoetalMonitorDetailsByFlowId(isA(Long.class));
        assertEquals(
                "{\"benFetosenseData\":[{\"partnerFoetalMonitorId\":2,\"beneficiaryRegID\":2,\"benFlowID\":2,\"visitCode\":0,"
                        + "\"foetalMonitorTestId\":2,\"resultState\":false},{\"partnerFoetalMonitorId\":1,\"beneficiaryRegID\":1,\"benFlowID"
                        + "\":1,\"visitCode\":1,\"foetalMonitorTestId\":1,\"resultState\":true}]}",
                actualFoetalMonitorDetails);
    }

    @Test
    void testGetFoetalMonitorDetails4() throws IEMRException {
        // Arrange
        when(foetalMonitorRepo.getFoetalMonitorDetailsByFlowId(Mockito.<Long>any()))
                .thenThrow(new RuntimeException("benFetosenseData"));

        // Act and Assert
        assertThrows(IEMRException.class, () -> foetalMonitorServiceImpl.getFoetalMonitorDetails(1L));
        verify(foetalMonitorRepo).getFoetalMonitorDetailsByFlowId(isA(Long.class));
    }

    @Test
    void testGetFoetalMonitorDetails5() throws IEMRException {
        // Arrange
        FoetalMonitor foetalMonitor = mock(FoetalMonitor.class);
        when(foetalMonitor.getResultState()).thenReturn(true);
        when(foetalMonitor.getBenFlowID()).thenReturn(1L);
        when(foetalMonitor.getBeneficiaryRegID()).thenReturn(1L);
        when(foetalMonitor.getFoetalMonitorID()).thenReturn(1L);
        when(foetalMonitor.getFoetalMonitorTestId()).thenReturn(1L);
        when(foetalMonitor.getVisitCode()).thenReturn(1L);
        doNothing().when(foetalMonitor).setAccelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setAccelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setBasalHeartRate(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setBenFlowID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setBeneficiaryRegID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setCmMotherId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setCreatedDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setDecelerationsList(Mockito.<ArrayList<Object>>any());
        doNothing().when(foetalMonitor).setDecelerationsListDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setDeleted(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setDeviceId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorID(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setFoetalMonitorMotherID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorPartnerID(Mockito.<String>any());
        doNothing().when(foetalMonitor).setFoetalMonitorTestId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setLastModDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setLengthOfTest(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setLongTermVariation(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setModifiedBy(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMother(Mockito.<Map<String, String>>any());
        doNothing().when(foetalMonitor).setMotherLMPDate(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setMotherName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setMovementEntries(Mockito.<ArrayList<Integer>>any());
        doNothing().when(foetalMonitor).setMovementEntriesDB(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerFoetalMonitorId(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setPartnerId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setPartnerName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProcessed(Mockito.<String>any());
        doNothing().when(foetalMonitor).setProviderServiceMapID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setReportPath(Mockito.<String>any());
        doNothing().when(foetalMonitor).setResultState(Mockito.<Boolean>any());
        doNothing().when(foetalMonitor).setShortTermVariationBpm(Mockito.<String>any());
        doNothing().when(foetalMonitor).setShortTermVariationMilli(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setTestDoneAt(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestId(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestName(Mockito.<String>any());
        doNothing().when(foetalMonitor).setTestTime(Mockito.<Timestamp>any());
        doNothing().when(foetalMonitor).setVanID(Mockito.<Integer>any());
        doNothing().when(foetalMonitor).setVisitCode(Mockito.<Long>any());
        doNothing().when(foetalMonitor).setaMRITFilePath(Mockito.<String>any());
        foetalMonitor.setAccelerationsList(new ArrayList<>());
        foetalMonitor.setAccelerationsListDB("benFetosenseData");
        foetalMonitor.setBasalHeartRate(1);
        foetalMonitor.setBenFlowID(1L);
        foetalMonitor.setBeneficiaryID(1L);
        foetalMonitor.setBeneficiaryRegID(1L);
        foetalMonitor.setCmMotherId("42");
        foetalMonitor.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        foetalMonitor.setCreatedDate(mock(Timestamp.class));
        foetalMonitor.setDecelerationsList(new ArrayList<>());
        foetalMonitor.setDecelerationsListDB("benFetosenseData");
        foetalMonitor.setDeleted(true);
        foetalMonitor.setDeviceId("42");
        foetalMonitor.setFoetalMonitorID(1L);
        foetalMonitor.setFoetalMonitorMotherID("benFetosenseData");
        foetalMonitor.setFoetalMonitorPartnerID("42");
        foetalMonitor.setFoetalMonitorTestId(1L);
        foetalMonitor.setLastModDate(mock(Timestamp.class));
        foetalMonitor.setLengthOfTest(3);
        foetalMonitor.setLongTermVariation(1);
        foetalMonitor.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        foetalMonitor.setMother(new HashMap<>());
        foetalMonitor.setMotherLMPDate(mock(Timestamp.class));
        foetalMonitor.setMotherName("benFetosenseData");
        foetalMonitor.setMovementEntries(new ArrayList<>());
        foetalMonitor.setMovementEntriesDB("benFetosenseData");
        foetalMonitor.setPartnerFoetalMonitorId(1L);
        foetalMonitor.setPartnerId("42");
        foetalMonitor.setPartnerName("benFetosenseData");
        foetalMonitor.setProcessed("benFetosenseData");
        foetalMonitor.setProviderServiceMapID(1);
        foetalMonitor.setReportPath("benFetosenseData");
        foetalMonitor.setResultState(true);
        foetalMonitor.setShortTermVariationBpm("benFetosenseData");
        foetalMonitor.setShortTermVariationMilli(1);
        foetalMonitor.setTestDoneAt("benFetosenseData");
        foetalMonitor.setTestId("42");
        foetalMonitor.setTestName("benFetosenseData");
        foetalMonitor.setTestTime(mock(Timestamp.class));
        foetalMonitor.setVanID(1);
        foetalMonitor.setVisitCode(1L);
        foetalMonitor.setaMRITFilePath("/directory/foo.txt");

        ArrayList<FoetalMonitor> foetalMonitorList = new ArrayList<>();
        foetalMonitorList.add(foetalMonitor);
        when(foetalMonitorRepo.getFoetalMonitorDetailsByFlowId(Mockito.<Long>any())).thenReturn(foetalMonitorList);

        // Act
        String actualFoetalMonitorDetails = foetalMonitorServiceImpl.getFoetalMonitorDetails(1L);

        // Assert
        verify(foetalMonitor).getBenFlowID();
        verify(foetalMonitor).getBeneficiaryRegID();
        verify(foetalMonitor).getFoetalMonitorID();
        verify(foetalMonitor).getFoetalMonitorTestId();
        verify(foetalMonitor).getResultState();
        verify(foetalMonitor).getVisitCode();
        verify(foetalMonitor).setAccelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setAccelerationsListDB(eq("benFetosenseData"));
        verify(foetalMonitor).setBasalHeartRate(isA(Integer.class));
        verify(foetalMonitor).setBenFlowID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryID(isA(Long.class));
        verify(foetalMonitor).setBeneficiaryRegID(isA(Long.class));
        verify(foetalMonitor).setCmMotherId(eq("42"));
        verify(foetalMonitor).setCreatedBy(eq("Jan 1, 2020 8:00am GMT+0100"));
        verify(foetalMonitor).setCreatedDate(isA(Timestamp.class));
        verify(foetalMonitor).setDecelerationsList(isA(ArrayList.class));
        verify(foetalMonitor).setDecelerationsListDB(eq("benFetosenseData"));
        verify(foetalMonitor).setDeleted(isA(Boolean.class));
        verify(foetalMonitor).setDeviceId(eq("42"));
        verify(foetalMonitor).setFoetalMonitorID(isA(Long.class));
        verify(foetalMonitor).setFoetalMonitorMotherID(eq("benFetosenseData"));
        verify(foetalMonitor).setFoetalMonitorPartnerID(eq("42"));
        verify(foetalMonitor).setFoetalMonitorTestId(isA(Long.class));
        verify(foetalMonitor).setLastModDate(isA(Timestamp.class));
        verify(foetalMonitor).setLengthOfTest(isA(Integer.class));
        verify(foetalMonitor).setLongTermVariation(isA(Integer.class));
        verify(foetalMonitor).setModifiedBy(eq("Jan 1, 2020 9:00am GMT+0100"));
        verify(foetalMonitor).setMother(isA(Map.class));
        verify(foetalMonitor).setMotherLMPDate(isA(Timestamp.class));
        verify(foetalMonitor).setMotherName(eq("benFetosenseData"));
        verify(foetalMonitor).setMovementEntries(isA(ArrayList.class));
        verify(foetalMonitor).setMovementEntriesDB(eq("benFetosenseData"));
        verify(foetalMonitor).setPartnerFoetalMonitorId(isA(Long.class));
        verify(foetalMonitor).setPartnerId(eq("42"));
        verify(foetalMonitor).setPartnerName(eq("benFetosenseData"));
        verify(foetalMonitor).setProcessed(eq("benFetosenseData"));
        verify(foetalMonitor).setProviderServiceMapID(isA(Integer.class));
        verify(foetalMonitor).setReportPath(eq("benFetosenseData"));
        verify(foetalMonitor).setResultState(isA(Boolean.class));
        verify(foetalMonitor).setShortTermVariationBpm(eq("benFetosenseData"));
        verify(foetalMonitor).setShortTermVariationMilli(isA(Integer.class));
        verify(foetalMonitor).setTestDoneAt(eq("benFetosenseData"));
        verify(foetalMonitor).setTestId(eq("42"));
        verify(foetalMonitor).setTestName(eq("benFetosenseData"));
        verify(foetalMonitor).setTestTime(isA(Timestamp.class));
        verify(foetalMonitor).setVanID(isA(Integer.class));
        verify(foetalMonitor).setVisitCode(isA(Long.class));
        verify(foetalMonitor).setaMRITFilePath(eq("/directory/foo.txt"));
        verify(foetalMonitorRepo).getFoetalMonitorDetailsByFlowId(isA(Long.class));
        assertEquals(
                "{\"benFetosenseData\":[{\"partnerFoetalMonitorId\":1,\"beneficiaryRegID\":1,\"benFlowID\":1,\"visitCode\":1,"
                        + "\"foetalMonitorTestId\":1,\"resultState\":true}]}",
                actualFoetalMonitorDetails);
    }
}
